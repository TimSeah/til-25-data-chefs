# -*- coding: utf-8 -*-
"""Debugger CV.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Udfi2BD5OKs9i9SBCqg8uyQxCDHgEBVD
"""

import cv2
from ultralytics import YOLO
from pathlib import Path

# --- Configuration ---

# 1. Make sure your trained model is in the same directory as this script.
MODEL_PATH = Path(__file__).parent / "best.pt"

# 2. IMPORTANT: Choose an image from your validation set to test.
#    Update this path to a real image file.
IMAGE_PATH = "/home/jupyter/advanced/cv/images/18192.jpg" # <<< UPDATE THIS PATH

# 3. This is the name of the output file that will be created.
OUTPUT_IMAGE_PATH = "debug_output.jpg"

# --- Main Script ---

def debug_model_predictions():
    """
    Loads the model, runs inference on a single image, and saves the visualized output.
    """
    print(f"Loading model from: {MODEL_PATH}")
    if not MODEL_PATH.exists():
        print(f"ERROR: Model file not found at {MODEL_PATH}")
        return

    print(f"Loading image from: {IMAGE_PATH}")
    if not Path(IMAGE_PATH).exists():
        print(f"ERROR: Image file not found at {IMAGE_PATH}")
        return

    try:
        # Load the same model your server uses
        model = YOLO(MODEL_PATH)
        print("Model loaded successfully.")

        # Run prediction with the EXACT same settings as your cv_manager.py
        print(f"Running inference with imgsz=960, conf=0.25...")
        results = model.predict(
            source=IMAGE_PATH,
            imgsz=960,
            conf=0.25,
            iou=0.45,
            device='cuda',
            half=True
        )
        print("Inference complete.")

        # The .plot() method automatically draws the bounding boxes and labels
        # on the image. It returns a single image as a NumPy array.
        annotated_image = results[0].plot()

        # Save the annotated image to a file
        cv2.imwrite(OUTPUT_IMAGE_PATH, annotated_image)
        print(f"SUCCESS: Annotated image saved to '{OUTPUT_IMAGE_PATH}'")
        print("Please open this file to see what your model detected.")

    except Exception as e:
        print(f"An error occurred during the debug process: {e}")

if __name__ == "__main__":
    debug_model_predictions()